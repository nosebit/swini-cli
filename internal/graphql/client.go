// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package graphql

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type AccountCreate_AccountCreate struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *AccountCreate_AccountCreate) GetID() string {
	if t == nil {
		t = &AccountCreate_AccountCreate{}
	}
	return t.ID
}

type PayAccountSetup_PayAccountSetup struct {
	URL string "json:\"url\" graphql:\"url\""
}

func (t *PayAccountSetup_PayAccountSetup) GetURL() string {
	if t == nil {
		t = &PayAccountSetup_PayAccountSetup{}
	}
	return t.URL
}

type PayMethodSetup_PayMethodSetup struct {
	URL string "json:\"url\" graphql:\"url\""
}

func (t *PayMethodSetup_PayMethodSetup) GetURL() string {
	if t == nil {
		t = &PayMethodSetup_PayMethodSetup{}
	}
	return t.URL
}

type AccountCreate struct {
	AccountCreate AccountCreate_AccountCreate "json:\"accountCreate\" graphql:\"accountCreate\""
}

func (t *AccountCreate) GetAccountCreate() *AccountCreate_AccountCreate {
	if t == nil {
		t = &AccountCreate{}
	}
	return &t.AccountCreate
}

type PayAccountSetup struct {
	PayAccountSetup PayAccountSetup_PayAccountSetup "json:\"payAccountSetup\" graphql:\"payAccountSetup\""
}

func (t *PayAccountSetup) GetPayAccountSetup() *PayAccountSetup_PayAccountSetup {
	if t == nil {
		t = &PayAccountSetup{}
	}
	return &t.PayAccountSetup
}

type PayMethodSetup struct {
	PayMethodSetup PayMethodSetup_PayMethodSetup "json:\"payMethodSetup\" graphql:\"payMethodSetup\""
}

func (t *PayMethodSetup) GetPayMethodSetup() *PayMethodSetup_PayMethodSetup {
	if t == nil {
		t = &PayMethodSetup{}
	}
	return &t.PayMethodSetup
}

const AccountCreateDocument = `mutation AccountCreate ($pubkey: String!) {
	accountCreate(pubkey: $pubkey) {
		id
	}
}
`

func (c *Client) AccountCreate(ctx context.Context, pubkey string, interceptors ...clientv2.RequestInterceptor) (*AccountCreate, error) {
	vars := map[string]any{
		"pubkey": pubkey,
	}

	var res AccountCreate
	if err := c.Client.Post(ctx, "AccountCreate", AccountCreateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PayAccountSetupDocument = `mutation PayAccountSetup {
	payAccountSetup {
		url
	}
}
`

func (c *Client) PayAccountSetup(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*PayAccountSetup, error) {
	vars := map[string]any{}

	var res PayAccountSetup
	if err := c.Client.Post(ctx, "PayAccountSetup", PayAccountSetupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PayMethodSetupDocument = `mutation PayMethodSetup {
	payMethodSetup {
		url
	}
}
`

func (c *Client) PayMethodSetup(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*PayMethodSetup, error) {
	vars := map[string]any{}

	var res PayMethodSetup
	if err := c.Client.Post(ctx, "PayMethodSetup", PayMethodSetupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	AccountCreateDocument:   "AccountCreate",
	PayAccountSetupDocument: "PayAccountSetup",
	PayMethodSetupDocument:  "PayMethodSetup",
}
