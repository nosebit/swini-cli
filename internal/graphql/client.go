// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package graphql

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type AccountCreate_AccountCreate struct {
	UserID string "json:\"user_id\" graphql:\"user_id\""
}

func (t *AccountCreate_AccountCreate) GetUserID() string {
	if t == nil {
		t = &AccountCreate_AccountCreate{}
	}
	return t.UserID
}

type AccountCreate struct {
	AccountCreate AccountCreate_AccountCreate "json:\"accountCreate\" graphql:\"accountCreate\""
}

func (t *AccountCreate) GetAccountCreate() *AccountCreate_AccountCreate {
	if t == nil {
		t = &AccountCreate{}
	}
	return &t.AccountCreate
}

const AccountCreateDocument = `mutation AccountCreate ($pubkey: String!) {
	accountCreate(pubkey: $pubkey) {
		user_id
	}
}
`

func (c *Client) AccountCreate(ctx context.Context, pubkey string, interceptors ...clientv2.RequestInterceptor) (*AccountCreate, error) {
	vars := map[string]any{
		"pubkey": pubkey,
	}

	var res AccountCreate
	if err := c.Client.Post(ctx, "AccountCreate", AccountCreateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	AccountCreateDocument: "AccountCreate",
}
